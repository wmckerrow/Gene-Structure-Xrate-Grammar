;; A grammar to predict consensus gene structure based on several sources of evidence
;; To see how the macros expand, type the following:
;;  echo | xrate -g dart/grammars/geneStructure.eg -x expanded.eg
;;  less expanded.eg

;; Here begins the grammar.  
(grammar
 (name geneStructure)
 (parametric)

 ;; **** BEGIN PARAMETER DEFINITIONS  ****
 
 ;; Define a seed rate to initialize the training of rate parameters
 ;; Supposedly, setting this at a low value works best, though EM is reasonably robust. 
 (&define SEED 0.001)
 (&define species_SEED 0.1)
 (&define observation_SEED 0.01)
 
 ;; Probability parameters - used for initial distributions and production rules. 
 (pgroup 
  ;; Note that each 'category' nonterminal has its own equilibrium distribution
  ;; These are currently set as uniform - one might set this a bit more 'skewed' towards
  ;; the type of token that a nonterminal is expected to emit. 
  (&foreach 
   category
   (E_cons F_cons G_cons I_cons J_cons K_cons X_cons 5_cons 3_cons U_cons V_cons)
   ((&foreach-token TOK 
    (&if
     (&or
      (&and (&eq category E_cons) (&eq TOK e))
      (&and (&eq category F_cons) (&eq TOK f))
      (&and (&eq category G_cons) (&eq TOK g))
      (&and (&eq category I_cons) (&eq TOK i))
      (&and (&eq category J_cons) (&eq TOK j))
      (&and (&eq category K_cons) (&eq TOK k))
      (&and (&eq category X_cons) (&eq TOK x))
      (&and (&eq category 5_cons) (&eq TOK 5))
      (&and (&eq category 3_cons) (&eq TOK 3))
      (&and (&eq category U_cons) (&eq TOK u))
      (&and (&eq category V_cons) (&eq TOK v))
     )
     ((&cat p_ category _ TOK) 1 )
     ((&cat p_ category _ TOK) 0 ) ) )
    )
   )
  
  ;; Initial distribution over categories as governed by the start -> category transitions
  ((&foreach category (E_cons F_cons G_cons I_cons J_cons K_cons X_cons 5_cons 3_cons U_cons V_cons) ((&cat START2 category) (&div 1 11)) ) )
  
  ;; Probabilities of going from / staying in a given category at the CONSENSUS (e.g. root) level
  ((E_cons2E_cons .81) (E_cons2F_cons 0) (E_cons2G_cons 0) (E_cons2I_cons .03) (E_cons2J_cons .03) (E_cons2K_cons .03) (E_cons2X_cons .01) (E_cons25_cons 0) (E_cons23_cons .09) (E_cons2U_cons 0) (E_cons2V_cons 0))
  ((F_cons2E_cons 0) (F_cons2F_cons .81) (F_cons2G_cons 0) (F_cons2I_cons .03) (F_cons2J_cons .03) (F_cons2K_cons .03) (F_cons2X_cons .01) (F_cons25_cons 0) (F_cons23_cons .09) (F_cons2U_cons 0) (F_cons2V_cons 0))
  ((G_cons2E_cons 0) (G_cons2F_cons 0) (G_cons2G_cons .81) (G_cons2I_cons .03) (G_cons2J_cons .03) (G_cons2K_cons .03) (G_cons2X_cons .01) (G_cons25_cons 0) (G_cons23_cons .09) (G_cons2U_cons 0) (G_cons2V_cons 0))
  ((I_cons2E_cons .1) (I_cons2F_cons 0) (I_cons2G_cons 0) (I_cons2I_cons .9) (I_cons2J_cons 0) (I_cons2K_cons 0) (I_cons2X_cons 0) (I_cons25_cons 0) (I_cons23_cons 0) (I_cons2U_cons 0) (I_cons2V_cons 0))
  ((J_cons2E_cons 0) (J_cons2F_cons .9) (J_cons2G_cons 0) (J_cons2I_cons 0) (J_cons2J_cons .9) (J_cons2K_cons 0) (J_cons2X_cons 0) (J_cons25_cons 0) (J_cons23_cons 0) (J_cons2U_cons 0) (J_cons2V_cons 0))
  ((K_cons2E_cons 0) (K_cons2F_cons 0) (K_cons2G_cons .1) (K_cons2I_cons 0) (K_cons2J_cons 0) (K_cons2K_cons .9) (K_cons2X_cons 0) (K_cons25_cons 0) (K_cons23_cons 0) (K_cons2U_cons 0) (K_cons2V_cons 0))
  ((X_cons2E_cons .01) (X_cons2F_cons 0) (X_cons2G_cons 0) (X_cons2I_cons 0) (X_cons2J_cons 0) (X_cons2K_cons 0) (X_cons2X_cons .9) (X_cons25_cons .09) (X_cons23_cons 0) (X_cons2U_cons 0) (X_cons2V_cons 0))
  ((5_cons2E_cons .16) (5_cons2F_cons 0) (5_cons2G_cons 0) (5_cons2I_cons 0) (5_cons2J_cons 0) (5_cons2K_cons 0) (5_cons2X_cons 0) (5_cons25_cons .8) (5_cons23_cons 0) (5_cons2U_cons .04) (5_cons2V_cons 0))
  ((3_cons2E_cons 0) (3_cons2F_cons 0) (3_cons2G_cons 0) (3_cons2I_cons 0) (3_cons2J_cons 0) (3_cons2K_cons 0) (3_cons2X_cons .16) (3_cons25_cons 0) (3_cons23_cons .8) (3_cons2U_cons 0) (3_cons2V_cons .04))
  ((U_cons2E_cons 0) (U_cons2F_cons 0) (U_cons2G_cons 0) (U_cons2I_cons 0) (U_cons2J_cons 0) (U_cons2K_cons 0) (U_cons2X_cons 0) (U_cons25_cons .2) (U_cons23_cons 0) (U_cons2U_cons .8) (U_cons2V_cons 0))
  ((V_cons2E_cons 0) (V_cons2F_cons 0) (V_cons2G_cons 0) (V_cons2I_cons 0) (V_cons2J_cons 0) (V_cons2K_cons 0) (V_cons2X_cons 0) (V_cons25_cons 0) (V_cons23_cons .2) (V_cons2U_cons 0) (V_cons2V_cons .8))
  )

 ;; Rate parameters - one set governs the inter-species changes and another the 'observation' 
 ;; These are (for now) shared among the different chains used by the {E,I,X}_cons nonterminals
 (&foreach 
  TYPE 
  (species)
  (&foreach-token 
   SRC
   (&foreach-token 
    DEST
    (&if 
     (&eq SRC DEST) 
     ()
     ;; why can't I do this? I'd like to be able to seed them differently for testing purposes
     ;;(rate ((&cat TYPE _ SRC _ DEST) (&cat TYPE _SEED) ) ) )
     (rate ((&cat TYPE _ SRC _ DEST) (&cat SEED) ) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 (&foreach-leaf
  TYPE
  (&foreach-token
   SRC
   (&foreach-token
    DEST
    (&if
     (&eq SRC DEST)
     ()
     ;; why can't I do this? I'd like to be able to seed them differently for testing purposes
     ;;(rate ((&cat TYPE _ SRC _ DEST) (&cat TYPE _SEED) ) ) )
     (rate ((&cat TYPE _ SRC _ DEST) (&cat SEED) ) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 ;; **** END PARAMETER DEFINITIONS  ****

 ;; **** BEGIN MARKOV CHAIN DEFINITIONS  ****

 ;; Define species_chain and observation_chain
 ;; These are identical in form, but they have separate parametrizations
 (&foreach 
  category 
  (E_cons F_cons G_cons I_cons J_cons K_cons X_cons 5_cons 3_cons U_cons V_cons)
  (&foreach
   TYPE
   (species)
   ;; Define the Markov chains for residue substitution ( i - e - x )
   ;; There are two of these for each category - one for species-level evo and one observations
   (chain
    (update-policy parametric)
    (terminal ((&cat category _ TYPE)))
    
    ;; Initial probability distributions - call forth the parameters declared in the pgroup block above
    (&foreach-token
     TOK
     (initial (state (TOK)) (prob (&cat p_ category _ TOK)))
     )
    
    ;; Mutation rates - simply call forth the parameters declared in the rate blocks above
    (&foreach-token
     SRC
     (&foreach-token
      DEST
      (&if
       (&eq SRC DEST)
       ()
       (mutate (from (SRC)) (to (DEST)) (rate (&cat TYPE _ SRC _ DEST) ) )
;;e.g.:(mutate (from (e))   (to (x))    (rate species_e_x))
       )
      )
     )
    ) ;; end chain
   ) ;; end types
  ) ;; end categories

 (&foreach
  category
  (E_cons F_cons G_cons I_cons J_cons K_cons X_cons 5_cons 3_cons U_cons V_cons)
  (&foreach-leaf
   TYPE
   ;; Define the Markov chains for residue substitution ( i - e - x )
   ;; There are two of these for each category - one for species-level evo and one observations
   (chain
    (update-policy parametric)
    (terminal ((&cat category _ TYPE)))
    
    ;; Initial probability distributions - call forth the parameters declared in the pgroup block above
    (&foreach-token
     TOK
     (initial (state (TOK)) (prob (&cat p_ category _ TOK)))
     )
    
    ;; Mutation rates - simply call forth the parameters declared in the rate blocks above
    (&foreach-token
     SRC
     (&foreach-token
      DEST
      (&if
       (&eq SRC DEST)
       ()
       (mutate (from (SRC)) (to (DEST)) (rate (&cat TYPE _ SRC _ DEST) ) )
;;e.g.:(mutate (from (e))   (to (x))    (rate species_e_x))
       )
      )
     )
    ) ;; end chain
   ) ;; end types
  ) ;; end categories

 ;; Done defining regular chains

 
 ;; Define the hybrid chains, which are composed of a category_species chain and a category_observation components
 ;; The observation chain models transitions on terminal branches (leading to "leaves") 
 ;; and the species chain models transitions on the internal branches. 
 ;; This declaration is a bit hairy, since we've got multiple loops *within* the components block.  See this page for details on hybrids:
 ;; http://biowiki.org/XrateFormat#Hybrid_chains
 (&foreach 
  category
  (E_cons F_cons G_cons I_cons J_cons K_cons X_cons 5_cons 3_cons U_cons V_cons)
  (hybrid-chain
   (terminal ((&cat category _ species-obs-hybrid))) ;; Name the hybrid chain based on the category it emits from.
   (row ?) ;; We'd like the label (below) to correspond to a node name (again, see biowiki link above).
   (components ;; Define the components of the hybrid chain - this is based on whether or not the branch is *terminal*
    (&foreach-leaf
     NODE
     ((label NODE) (terminal ((&cat category _ NODE)))) ;; for branches leading to leaves - use the observation chain
     );; end leaf
    (&foreach-ancestor
     NODE
     ((label NODE) (terminal ((&cat category _ species)))) ;; for branches leading to ancestral nodes - use the species chain
     ) ;; end ancestor
    );; end components
   );; end hybrid chain
  );; end category
 ;; Done defining hybrid chains
 
 ;; **** END MARKOV CHAIN DEFINITIONS  ****

 ;; **** BEGIN TOP-LEVEL PRODUCTION RULES **** 

 ;; Transitions from start
 (&foreach 
  category
  (E_cons F_cons G_cons I_cons J_cons K_cons X_cons 5_cons 3_cons U_cons V_cons)
  (transform  (from (START))  (to (category)) (prob (&cat START2 category)))
  )
 ;; START->END transition ensures that empty alignments don't have zero likelihood
 (transform (from (START))  (to ()))
 
 ;; Production rules for transitions between categories
 (&foreach 
  SRC_category
  (E_cons F_cons G_cons I_cons J_cons K_cons X_cons 5_cons 3_cons U_cons V_cons)
  ;; Each category nonterminal produces an alignment column, and then potentially ends the alignment
  ;; Each category nonterminal emits using its specially-designed hybrid chain. 
  (transform  (from (SRC_category))  (to ((&cat SRC_category _ species-obs-hybrid) (&cat SRC_category *))))
  (transform  (from ((&cat SRC_category *)))  (to ()))

  (&foreach 
   DEST_category
   (E_cons F_cons G_cons I_cons J_cons K_cons X_cons 5_cons 3_cons U_cons V_cons)
   ;; After emission, each category nonterminal 
   ;; can transform into any other category (including itself)
   (transform  (from ((&cat SRC_category *)))  (to (DEST_category)) (prob (&cat SRC_category 2 DEST_category)))
   )
  )
 ) ;; end grammar geneStructure

;; **** END TOP-LEVEL PRODUCTION RULES **** 

(alphabet
 (name geneStructure)
 (token (e f g i j k x 5 3 u v))
 (extend (to y) (from e) (from f) (from g) (from 5) (from 3))
 (extend (to z) (from i) (from j) (from k) (from u) (from v))
 (wildcard *)
 ) ;; end alphabet geneStructure

