This is an explanation (with notes) of how the sequence generator works so far.

DATA STRUCTURES (are classes better?):
TreeNode: This is a node of a tree. This label is a single character stored as x. The node also contains pointers to up to MAXCHILDREN children. As of now, MAXCHILDREN is set using #define. It would be nice not to have a limit on the number of children, but it seems necessary since we need to set aside a finite amount of memory for the children pointers. (I guess I could make a linked list of children…)

TreeList: This is an element of the linked list of trees that holds the sequence data. It contains a pointer to a tree and another to the next list item.



FUNCTIONS:
PrintTree: This prints labels of a tree. Prints the label on the node its given and then calls itself on each of the child nodes. It is not used, but is useful for debugging.


TreeSize: This returns the number of nodes in a tree. Uses a recursive design and the formula: treesize=1+SUM_children(treesize).


TreeToArray: Given a tree and an array this function puts the labels of the tree nodes into the array. It uses the same structure as print tree, but also uses the global variable myCounter to make sure that labels are put into the right spot on the array. (A stack or pointer would get rid of need for myCounter.)


NodeLocationsArray: This function puts information describing the location of each node in a tree into an array. The location of a node is stored in an int array of size MAXDEPTH. Given a location array we find the node referred to as follows. We start at the root of the tree and look at the first integer in the array (call it n). If n is -1 then we have found the node. Otherwise we follow the pointer at children[n] and repeat the process. Therefore the array {1,0,-1} means start at the root. Follow to child number 1. The node we are looking for is that node's child 0.

Currently the function works similarly to TreeToArray in that it saves the location of the node its on and then calls itself at each of its child nodes. It seems like a better design to use a loop and queue. This appears in Generator2.cpp, but it doesn't work yet.


ParseTree:
This creates a tree from a string in Newick format. Currently it does not accept branch lengths. It works by finding the commas that separate children at each depth. If the string begins with '(' then the first and last characters are ignored. We then move along the string counting the number of unbalanced '('. If at any point we meet a ',' when there are no unbalanced '(' then we save that location. This ',' separate the children. We create a new TreeNode for the entire string and then call ParseTree on the substrings separated by the saved comma locations. These child trees are then connected to the root node. Currently this function has a couple bugs. While it works in the NewickParser.cpp file, in the Generator.cpp, for some trees it creates extra child pointers that cause segfaults. This also happens if I tree to read parameters (unrelated to the tree) from file.


MakeTree: Calls ParseTree and gives all the nodes a given label.


CopyTree: This function returns a pointer to a copy of this input tree. It also needs to be sent a temporary TreeNode pointer to keep track of the tree its creating. The function copies label for the root of the old tree to the label for the root of the new tree. Then it calls copy tree on each of the child nodes of the old tree's root and attaches to copies to the new trees root.


RelabelTree: This function changes the label of all descendants of a TreeNode to a label that is passed to the function. It looks a lot like the PrintTree function except that instead of print the node label it changes it.


MutateTree: This function relabels all the descendants of a TreeNode given the root of a tree and a location array pin pointing the TreeNode. The function follows children pointers according to the location array and then calls RelabelTree once it gets to the node whose descendants must be relabeled.


AddTree: This straightforward function is given a TreeList in a linked list and tree. It inserts the tree into the linked list after the given TreeList.


FindLabel: Given a tree root and a location array this function finds the label at the node indicated by the location array. It is just like MutateTree except that instead of calling relabel tree it returns the label at the node.


MAIN:
We begin by making a temporary tree (mytree.) We use this tree to get the number of nodes in a tree and the locations of those nodes. This information will be needed later.

Next we initialize the linked list of trees and run the Markov process. The process continues as long as it is not in state 4. The model starts at state 0 and then proceeds to state 1. At state 1 it adds a tree labeled with 'x' to the end of the chain and with either goes to state 4 or state 2. In state 2, it adds a tree labeled with 'e' and then proceeds to state 1 or state 3. At state 3 it adds a tree labeled with 'i' and proceeds to state 2.

Then we mutate the tree. Skipping the root, we go through the node locations given by NodeLocationsArray. We move down the linked list with a pair of pointers at adjacent TreeLists. We follow these pointers to find the adjacent nodes given by the node location. Depending on what these labels are, certain mutations are possible. We determine which if any of these occur using a random number. Only one mutation is allowed per location. Currently the only mutations that occur are those which add more trees. For example the exon removal mutation: xe…ex -> xx…xx does not occur.

Finally we use TreeToArray to put all of the node label on all of the trees into a large matrix. We then print this matrix to the standard out.